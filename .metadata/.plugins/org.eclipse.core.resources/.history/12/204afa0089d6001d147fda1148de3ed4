package inc.soft.advpaint.x64.figures;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.WindowConstants;

public class editor extends JPanel implements MouseMotionListener,MouseListener{
	/**
	 * 
	 * 
	 */
	private Dimension selpoint;
	public ArrayList<figure> figs;
	private Point P;
	private Segment S;
	private Cercle C;
	private polygon G;
	private figure currentstate;
	private static final long serialVersionUID = 1L;
	public editor() {
		figs = new ArrayList<figure>();
		this.P = new Point("",0,0);
		this.S = new Segment("",null,null);
		this.C = new Cercle("",null,0);
		this.G = new polygon("",null);
		P.setEdit(this);
		S.setEdit(this);
		C.setEdit(this);
		G.setEdit(this);
		
	}
	public void reset_v() {
		this.P = new Point("",0,0);
		this.S = new Segment("",null,null);
		this.C = new Cercle("",null,0);
		this.G = new polygon("",null);
		P.setEdit(this);
		S.setEdit(this);
		C.setEdit(this);
		G.setEdit(this);

	}
	public static void main(String[] args) {
		JFrame fr = new JFrame("editeur");
		fr.setSize(new Dimension(800,600));
		fr.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		
		
		Container cont = fr.getContentPane();
		editor co2 = new editor();
		
		
		co2.setBackground(Color.white);
		JMenuBar men =new JMenuBar();
		JMenu m = new JMenu("create");
		JMenuItem j = new JMenuItem("Point");
		JMenuItem j1 = new JMenuItem("segment");
		JMenuItem j2 = new JMenuItem("cercle");
		JMenuItem j3 = new JMenuItem("polygon");
		
		men.add(m);
		j.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				for (MouseListener m :  co2.getMouseListeners()) {
					co2.removeMouseListener(m);
					
				}
				co2.reset_v();
				co2.currentstate = co2.P;
				
				co2.addMouseListener(co2.currentstate);
				
			}
			
		});
		
		
		j1.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				for (MouseListener m :  co2.getMouseListeners()) {
					co2.removeMouseListener(m);
					
				}
				co2.reset_v();
				co2.currentstate = co2.S;
				co2.addMouseListener(co2.currentstate);	
			}
			
		});
		j2.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				for (MouseListener m :  co2.getMouseListeners()) {
					co2.removeMouseListener(m);
					
				}
				co2.reset_v();
				co2.currentstate = co2.C;
				co2.addMouseListener(co2.currentstate);	
			}
			
		});
		j3.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				for (MouseListener m :  co2.getMouseListeners()) {
					co2.removeMouseListener(m);
					
				}
				co2.reset_v();
				co2.currentstate = co2.G;
				co2.addMouseListener(co2.currentstate);	
			}
			
		});
		
		m.add(j);
		m.add(j1);
		m.add(j2);
		m.add(j3);
		
		cont.add(men,BorderLayout.NORTH);
		
		
		cont.add(co2,BorderLayout.CENTER);
		fr.setVisible(true);
		cont.addMouseListener(co2.currentstate);
		

	}
	@Override
	public void paint(Graphics g) {
		super.paint(g);
		for (figure ele : figs) {
			ele.Paint(g);
		}
	}
	@Override
	public void mouseClicked(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void mousePressed(MouseEvent e) {
		selpoint = new Dimension(e.getX(),e.getY());
		
		
	}
	@Override
	public void mouseReleased(MouseEvent e) {
		for (figure f: figs) {
			if (f instanceof Point) {
				if (((Point)f).getX() <= selpoint.width && (((Point)f).getX() >= e.) {
					
				}
			}else if (f instanceof Segment) {
				
			}else if (f instanceof polygon) {
				
			}
			
		}
		
	}
	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void mouseDragged(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void mouseMoved(MouseEvent e) {
		if (selpoint!=null) {
			repaint();
			this.getGraphics().fillRect(selpoint.width, selpoint.height, e.getX()-selpoint.width,e.getY()-selpoint.height);
		}
		
	}
}

